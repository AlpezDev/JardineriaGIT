package jardineriagit;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

public class FrameOficinas extends javax.swing.JFrame {
    
    Conexion conexion = new Conexion();
    Connection con;
    int id = 39;
    DefaultTableModel model;
    PreparedStatement ps;
    ResultSet rs;  

  
    public FrameOficinas() {
        initComponents();
        setLocationRelativeTo(null);
        cargarDatos();                                    //Se cargan los elementos de la tabla
        ajustarAnchoColumna(tableBDPago);                     //Se llama al metodo que ajusta las columnas        
        tableBDPago.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);//Se desactiva el Auto Resize de la tabla
        comboTablas.setSelectedIndex(2);
        comboTablas.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String item = comboTablas.getSelectedItem().toString();
                
                switch(item){
                    case "Clientes":
                        dispose();
                        Main ppal = new Main();
                        ppal.setVisible(true);
                        break;
                    case "Empleados":
                        //paneCliente.setVisible(false);
                        break;
                    case "Oficinas":
                        break;
                    case "Pagos": 
                        dispose();
                        FramePagos pagos = new FramePagos();
                        pagos.setVisible(true);
                        break;
                }
            }   
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTittle = new javax.swing.JLabel();
        comboTablas = new javax.swing.JComboBox<>();
        panePago = new javax.swing.JPanel();
        paneDatos = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        idPago = new javax.swing.JTextField();
        direccion2 = new javax.swing.JTextField();
        lblTelefono = new javax.swing.JLabel();
        lblDir1 = new javax.swing.JLabel();
        telefono = new javax.swing.JTextField();
        ciudad = new javax.swing.JTextField();
        direccion1 = new javax.swing.JTextField();
        region = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblCiudad = new javax.swing.JLabel();
        postal = new javax.swing.JTextField();
        lblPostal = new javax.swing.JLabel();
        pais = new javax.swing.JTextField();
        lblPais = new javax.swing.JLabel();
        paneOperar = new javax.swing.JPanel();
        agregar = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        actualizar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        paneBD = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBDPago = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTittle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTittle.setForeground(new java.awt.Color(255, 0, 0));
        lblTittle.setText("Jardinería La Flores");

        comboTablas.setBackground(new java.awt.Color(236, 227, 227));
        comboTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clientes", "Empleados", "Oficinas", "Pagos" }));

        paneDatos.setBackground(new java.awt.Color(241, 235, 235));
        paneDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 102))); // NOI18N
        paneDatos.setForeground(new java.awt.Color(0, 0, 102));

        jLabel1.setText("Código:");

        idPago.setEditable(false);
        idPago.setEnabled(false);

        direccion2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direccion2ActionPerformed(evt);
            }
        });

        lblTelefono.setText("Teléfono:");

        lblDir1.setText("Dirección 1:");

        telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                telefonoActionPerformed(evt);
            }
        });

        ciudad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ciudadActionPerformed(evt);
            }
        });

        direccion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                direccion1ActionPerformed(evt);
            }
        });

        region.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionActionPerformed(evt);
            }
        });

        jLabel7.setText("Dirección 2:");

        jLabel9.setText("Región:");

        lblCiudad.setText("Ciudad:");

        postal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postalActionPerformed(evt);
            }
        });

        lblPostal.setText("C. Postal:");

        pais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paisActionPerformed(evt);
            }
        });

        lblPais.setText("País:");

        javax.swing.GroupLayout paneDatosLayout = new javax.swing.GroupLayout(paneDatos);
        paneDatos.setLayout(paneDatosLayout);
        paneDatosLayout.setHorizontalGroup(
            paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneDatosLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCiudad)
                            .addGroup(paneDatosLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lblPais)))
                        .addGap(18, 18, 18)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pais, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblPostal)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(region, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(postal, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(idPago, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(direccion2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDir1)
                            .addComponent(lblTelefono))
                        .addGap(18, 18, 18)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(direccion1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        paneDatosLayout.setVerticalGroup(
            paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneDatosLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(region, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ciudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(lblCiudad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPostal)
                    .addComponent(lblPais))
                .addGap(63, 63, 63))
            .addGroup(paneDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefono))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(direccion1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDir1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(direccion2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneOperar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        actualizar.setText("Actualizar");
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar Campos");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneOperarLayout = new javax.swing.GroupLayout(paneOperar);
        paneOperar.setLayout(paneOperarLayout);
        paneOperarLayout.setHorizontalGroup(
            paneOperarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneOperarLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(actualizar)
                .addGap(18, 18, 18)
                .addComponent(buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addGap(22, 22, 22))
        );
        paneOperarLayout.setVerticalGroup(
            paneOperarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneOperarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneOperarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualizar)
                    .addComponent(agregar)
                    .addComponent(buscar)
                    .addComponent(eliminar)
                    .addComponent(btnLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneBD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setWheelScrollingEnabled(false);

        tableBDPago.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Ciudad", "País", "Región", "Postal", "Teléfono", "Dirección 1", "Dirección 2"
            }
        ));
        tableBDPago.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBDPagoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableBDPago);

        javax.swing.GroupLayout paneBDLayout = new javax.swing.GroupLayout(paneBD);
        paneBD.setLayout(paneBDLayout);
        paneBDLayout.setHorizontalGroup(
            paneBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(paneBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(paneBDLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        paneBDLayout.setVerticalGroup(
            paneBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
            .addGroup(paneBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(paneBDLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout panePagoLayout = new javax.swing.GroupLayout(panePago);
        panePago.setLayout(panePagoLayout);
        panePagoLayout.setHorizontalGroup(
            panePagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePagoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(panePagoLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(panePagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(paneOperar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paneBD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panePagoLayout.setVerticalGroup(
            panePagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePagoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneOperar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paneBD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(208, 208, 208)
                .addComponent(lblTittle)
                .addGap(18, 18, 18)
                .addComponent(comboTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTittle)
                    .addComponent(comboTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed

        String getCiudad = ciudad.getText();
        String getRegion = region.getText();
        String getPais = pais.getText();
        String getPostal = postal.getText();
        String getDir1 = direccion1.getText();
        String getDir2 = direccion2.getText();
        String tel = telefono.getText();
        //Validación de campos obligatorios en la Basde de Datos
        if(getCiudad.equals("") || getPais.equals("") || getPostal.equals("") || getDir1.equals("")){
            JOptionPane.showMessageDialog(this, "Llene los campos marcados en rojo", "Campos vacios", JOptionPane.ERROR_MESSAGE);
            if(getCiudad.equals("")){
                lblCiudad.setForeground(Color.RED);
                ciudad.requestFocus();
            }else{
                lblCiudad.setForeground(Color.BLACK);
            }
            if(getPais.equals("")){
                lblPais.setForeground(Color.RED);
                pais.requestFocus();
            }else{
                lblPais.setForeground(Color.BLACK);
            }
            if(getPostal.equals("")){
                lblPostal.setForeground(Color.RED);
                postal.requestFocus();
            }else{
                lblPostal.setForeground(Color.BLACK);
            }
            if(getDir1.equals("")){
                lblDir1.setForeground(Color.RED);
                direccion1.requestFocus();
            }else{
                lblDir1.setForeground(Color.BLACK);
            }
        }else{
            try{
                ps = conexion.con.prepareStatement("INSERT INTO oficina (codigo_oficina, ciudad, pais, region, codigo_postal, "
                        + "telefono, linea_direccion1, linea_direccion2) VALUES (?,?,?,?,?,?,?,?)");                
                
                ps.setString(1, "BCN-ES"+(id+1));
                ps.setString(2, getCiudad);
                ps.setString(3, getPais);
                ps.setString(4, getRegion);
                ps.setString(5, getPostal);
                ps.setString(6, tel);
                ps.setString(7, getDir1);
                ps.setString(8, getDir2);

                int verifica = ps.executeUpdate();
                if(verifica > 0){
                    JOptionPane.showMessageDialog(this, "Oficina agregada exitosamente");
                    limpiarCampos();
                    limpiarTabla();
                    cargarDatos();
                }else{
                    JOptionPane.showMessageDialog(this, "Oficina no registrada", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //con.close();
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed

        try{
            con = conexion.getConection();
            ps = con.prepareStatement("SELECT * FROM oficina WHERE codigo_oficina = ?");

            ps.setString(1, idPago.getText());

            rs = ps.executeQuery();
            if(rs.next()){
                idPago.setText(rs.getString("codigo_oficina"));  
                ciudad.setText(rs.getString("ciudad"));
                region.setText(rs.getString("region"));
                pais.setText(rs.getString("pais"));
                postal.setText(rs.getString("codigo_postal"));        
                direccion1.setText(rs.getString("linea_direccion1"));
                direccion2.setText(rs.getString("linea_direccion2"));
                telefono.setText(rs.getString("telefono"));
            }else{
                JOptionPane.showMessageDialog(this, "Oficina no existente", "Verifique código", JOptionPane.ERROR_MESSAGE);
            }

            //con.close();
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed

        try{
            con = conexion.getConection();
            ps = con.prepareStatement("UPDATE oficina SET ciudad=?, pais=?, region=?, codigo_postal=? , telefono=? ,"
                    + " linea_direccion1=? , linea_direccion2=? WHERE codigo_oficina=?");

            ps.setString(1, ciudad.getText());
            ps.setString(2, pais.getText());
            ps.setString(3, region.getText());
            ps.setString(4, postal.getText());
            ps.setString(5, telefono.getText());
            ps.setString(6, direccion1.getText());
            ps.setString(7, direccion2.getText());
            ps.setString(8, idPago.getText());

            ps.setString(5, idPago.getText());

            int verifica = ps.executeUpdate();
            if(verifica > 0){
                JOptionPane.showMessageDialog(this, "Oficina actualizada correctamente");
                limpiarCampos();
                limpiarTabla();
                cargarDatos();
            }else{
                JOptionPane.showMessageDialog(this, "Oficina no actualizada", "Verifique ID", JOptionPane.ERROR_MESSAGE);
            }
            //con.close();
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_actualizarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed

        int resp = JOptionPane.showConfirmDialog(this, "¿Desea borrar la oficina de "+ciudad.getText()+"?", "Confimación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(resp == 0){
            try{
                con = conexion.getConection();
                ps = con.prepareStatement("DELETE from oficina WHERE codigo_oficina = ?");

                ps.setString(1, idPago.getText());

                int verifica = ps.executeUpdate();
                if(verifica > 0){
                    JOptionPane.showMessageDialog(this, "Oficina borrada exitosamente");
                    limpiarCampos();
                    limpiarTabla();
                    cargarDatos();
                }else{
                    JOptionPane.showMessageDialog(this, "Oficina no encontrada", "Verifique ID", JOptionPane.ERROR_MESSAGE);
                }
                //con.close();
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_eliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void tableBDPagoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBDPagoMouseClicked
        int fila = tableBDPago.getSelectedRow();
        String idd, nombreCli, nombreCon, apellidoCon, tel, postt, tell, dir1, dir2;
        if(fila == -1){
            JOptionPane.showMessageDialog(this, "Seleccione una fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }else{
            idd = (String) tableBDPago.getValueAt(fila, 0);
            nombreCli = (String) tableBDPago.getValueAt(fila, 1);
            nombreCon = (String) tableBDPago.getValueAt(fila, 2);
            apellidoCon = (String) tableBDPago.getValueAt(fila, 3);
            tel = (String) tableBDPago.getValueAt(fila, 4); 
            postt = (String) tableBDPago.getValueAt(fila, 5);
            tell = (String) tableBDPago.getValueAt(fila, 6);
            dir1 = (String) tableBDPago.getValueAt(fila, 7);
            dir2 = (String) tableBDPago.getValueAt(fila, 8);            

            idPago.setText(idd);
            ciudad.setText("sdgdsgdsgdsg");
            pais.setText(apellidoCon);
            region.setText(tel);
            postal.setText(postt);  
            telefono.setText(tell);
            direccion1.setText(dir1);
            direccion2.setText(dir2);            
        }
    }//GEN-LAST:event_tableBDPagoMouseClicked

    private void direccion2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direccion2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_direccion2ActionPerformed

    private void telefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_telefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_telefonoActionPerformed

    private void direccion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_direccion1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_direccion1ActionPerformed

    private void ciudadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ciudadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ciudadActionPerformed

    private void regionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regionActionPerformed

    private void postalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postalActionPerformed

    private void paisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paisActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paisActionPerformed

    private void cargarDatos() {
        try{
            con = conexion.getConection();
            ps = con.prepareStatement("SELECT * FROM oficina");                       
            rs = ps.executeQuery();
            Object[] cliente = new Object[8];
            model = (DefaultTableModel) tableBDPago.getModel();
            
            while(rs.next()){
                cliente[0] = rs.getString("codigo_oficina");
                cliente[1] = rs.getString("ciudad");
                cliente[2] = rs.getString("pais");
                cliente[3] = rs.getString("region");
                cliente[4] = rs.getString("codigo_postal");
                cliente[5] = rs.getString("telefono");
                cliente[6] = rs.getString("linea_direccion1");
                cliente[7] = rs.getString("linea_direccion2");
                
                model.addRow(cliente);
            }            
            tableBDPago.setModel(model);            
            //con.close();            
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void limpiarCampos(){        // Creamos funcion para limpriar los campos de texto
        idPago.setText("");
        ciudad.setText("");
        pais.setText("");
        region.setText("");
        postal.setText("");  
        telefono.setText("");
        direccion1.setText("");
        direccion2.setText("");       
    }
    
    public void limpiarTabla(){
        for (int i = 0; i < tableBDPago.getRowCount(); i++) {
            model.removeRow(i);
            i = i-1;
        }
    }
    
    private void ajustarAnchoColumna(JTable table) {
        //Se obtiene el modelo de la columna
        TableColumnModel columnModel = table.getColumnModel();
        //Se obtiene el total de las columnas
        for (int column = 0; column < table.getColumnCount(); column++) {
            //Establecemos un valor minimo para el ancho de la columna
            int width = 30; //Min Width
            //Obtenemos el numero de filas de la tabla
            for (int row = 0; row < table.getRowCount(); row++) {
                //Obtenemos el renderizador de la tabla
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                //Creamos un objeto para preparar el renderer
                Component comp = table.prepareRenderer(renderer, row, column);
                //Establecemos el width segun el valor maximo del ancho de la columna
                width = Math.max(comp.getPreferredSize().width + 1, width);

            }
            //Se establece una condicion para no sobrepasar el valor de 110
            //Esto es Opcional
            if (width > 110) {
                width = 110;
            }
            //Se establece el ancho de la columna
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameOficinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameOficinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameOficinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameOficinas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameOficinas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar;
    private javax.swing.JButton agregar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField ciudad;
    private javax.swing.JComboBox<String> comboTablas;
    private javax.swing.JTextField direccion1;
    private javax.swing.JTextField direccion2;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField idPago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCiudad;
    private javax.swing.JLabel lblDir1;
    private javax.swing.JLabel lblPais;
    private javax.swing.JLabel lblPostal;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JTextField pais;
    private javax.swing.JPanel paneBD;
    private javax.swing.JPanel paneDatos;
    private javax.swing.JPanel paneOperar;
    private javax.swing.JPanel panePago;
    private javax.swing.JTextField postal;
    private javax.swing.JTextField region;
    private javax.swing.JTable tableBDPago;
    private javax.swing.JTextField telefono;
    // End of variables declaration//GEN-END:variables
}
