package jardineriagit;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

public class FramePagos extends javax.swing.JFrame {
    
    Conexion conexion = new Conexion();
    Connection con;
    int id = 39;
    DefaultTableModel model;
    PreparedStatement ps;
    ResultSet rs;  

  
    public FramePagos() {
        initComponents();
        setLocationRelativeTo(null);
        cargarDatos();                                    //Se cargan los elementos de la tabla
        ajustarAnchoColumna(tableBDPago);                     //Se llama al metodo que ajusta las columnas        
        tableBDPago.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);//Se desactiva el Auto Resize de la tabla
        comboTablas.setSelectedIndex(3);
        comboTablas.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String item = comboTablas.getSelectedItem().toString();
                
                switch(item){
                    case "Clientes":
                        dispose();
                        Main ppal = new Main();
                        ppal.setVisible(true);
                        break;
                    case "Empleados":
                        //paneCliente.setVisible(false);
                        break;
                    case "Oficinas":
                        dispose();
                        FrameOficinas oficina = new FrameOficinas();
                        oficina.setVisible(true);
                        break;
                    case "Pagos":
                        break;
                }
            }   
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTittle = new javax.swing.JLabel();
        comboTablas = new javax.swing.JComboBox<>();
        panePago = new javax.swing.JPanel();
        paneDatos = new javax.swing.JPanel();
        total = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        fecha = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblPago = new javax.swing.JLabel();
        lblTransa = new javax.swing.JLabel();
        idPago = new javax.swing.JTextField();
        pago = new javax.swing.JTextField();
        idTransa = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        paneOperar = new javax.swing.JPanel();
        agregar = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        actualizar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        paneBD = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBDPago = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTittle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTittle.setForeground(new java.awt.Color(255, 0, 0));
        lblTittle.setText("Jardinería La Flores");

        comboTablas.setBackground(new java.awt.Color(236, 227, 227));
        comboTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Clientes", "Empleados", "Oficinas", "Pagos" }));

        paneDatos.setBackground(new java.awt.Color(241, 235, 235));
        paneDatos.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 102))); // NOI18N
        paneDatos.setForeground(new java.awt.Color(0, 0, 102));

        lblFecha.setText("Fecha de pago:");

        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        jLabel1.setText("Código:");

        lblPago.setText("Forma de pago:");

        lblTransa.setText("Id Transacción:");

        idPago.setEditable(false);
        idPago.setEnabled(false);

        pago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagoActionPerformed(evt);
            }
        });

        idTransa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idTransaActionPerformed(evt);
            }
        });

        lblTotal.setText("Total:");

        javax.swing.GroupLayout paneDatosLayout = new javax.swing.GroupLayout(paneDatos);
        paneDatos.setLayout(paneDatosLayout);
        paneDatosLayout.setHorizontalGroup(
            paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneDatosLayout.createSequentialGroup()
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPago)
                            .addComponent(lblFecha))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneDatosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)))
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idPago, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(pago, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                        .addComponent(fecha)))
                .addGap(18, 18, 18)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTotal)
                    .addComponent(lblTransa))
                .addGap(18, 18, 18)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idTransa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 75, Short.MAX_VALUE))
        );
        paneDatosLayout.setVerticalGroup(
            paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneDatosLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPago))
                        .addGap(5, 5, 5)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFecha))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(paneDatosLayout.createSequentialGroup()
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idTransa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTransa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paneDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotal))
                        .addGap(57, 57, 57))))
        );

        paneOperar.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 102))); // NOI18N

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        actualizar.setText("Actualizar");
        actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarActionPerformed(evt);
            }
        });

        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar Campos");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneOperarLayout = new javax.swing.GroupLayout(paneOperar);
        paneOperar.setLayout(paneOperarLayout);
        paneOperarLayout.setHorizontalGroup(
            paneOperarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneOperarLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(agregar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(actualizar)
                .addGap(18, 18, 18)
                .addComponent(buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLimpiar)
                .addGap(22, 22, 22))
        );
        paneOperarLayout.setVerticalGroup(
            paneOperarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneOperarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paneOperarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actualizar)
                    .addComponent(agregar)
                    .addComponent(buscar)
                    .addComponent(eliminar)
                    .addComponent(btnLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        paneBD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setWheelScrollingEnabled(false);

        tableBDPago.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Forma de pago", "Id transacción", "Fecha de pago", "Total"
            }
        ));
        tableBDPago.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableBDPagoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableBDPago);

        javax.swing.GroupLayout paneBDLayout = new javax.swing.GroupLayout(paneBD);
        paneBD.setLayout(paneBDLayout);
        paneBDLayout.setHorizontalGroup(
            paneBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneBDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );
        paneBDLayout.setVerticalGroup(
            paneBDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneBDLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panePagoLayout = new javax.swing.GroupLayout(panePago);
        panePago.setLayout(panePagoLayout);
        panePagoLayout.setHorizontalGroup(
            panePagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePagoLayout.createSequentialGroup()
                .addGroup(panePagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panePagoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(paneDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panePagoLayout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(paneOperar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panePagoLayout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(paneBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        panePagoLayout.setVerticalGroup(
            panePagoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panePagoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneOperar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneBD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(243, 243, 243)
                .addComponent(lblTittle)
                .addGap(18, 18, 18)
                .addComponent(comboTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTittle)
                    .addComponent(comboTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panePago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed

        String getPago = pago.getText();
        String getTransa = idTransa.getText();
        String getFecha = fecha.getText();
        String getTotal = total.getText();
        //Validación de campos obligatorios en la Basde de Datos
        if(getPago.equals("") || getTransa.equals("") || getFecha.equals("") || getTotal.equals("")){
            JOptionPane.showMessageDialog(this, "Llene los campos marcados en rojo", "Campos vacios", JOptionPane.ERROR_MESSAGE);
            if(getPago.equals("")){
                lblPago.setForeground(Color.RED);
                pago.requestFocus();
            }else{
                lblPago.setForeground(Color.BLACK);
            }
            if(getTransa.equals("")){
                lblTransa.setForeground(Color.RED);
                idTransa.requestFocus();
            }else{
                lblTransa.setForeground(Color.BLACK);
            }
            if(getFecha.equals("")){
                lblFecha.setForeground(Color.RED);
                fecha.requestFocus();
            }else{
                lblFecha.setForeground(Color.BLACK);
            }
            if(getTotal.equals("")){
                lblTotal.setForeground(Color.RED);
                total.requestFocus();
            }else{
                lblTotal.setForeground(Color.BLACK);
            }
        }else{
            try{
                ps = conexion.con.prepareStatement("INSERT INTO pago (codigo_cliente, forma_pago, id_transaccion, fecha_pago, total) VALUES (?,?,?,?,?)");                
                
                ps.setInt(1, (id+1));
                ps.setString(2, pago.getText());
                ps.setString(3, idTransa.getText());
                ps.setString(4, fecha.getText());
                if(total.getText().equals("")) ps.setInt(5, 0);
                else ps.setInt(5, Integer.parseInt(total.getText()));

                int verifica = ps.executeUpdate();
                if(verifica > 0){
                    JOptionPane.showMessageDialog(this, "Pago exitoso");
                    limpiarCampos();
                    limpiarTabla();
                    cargarDatos();
                }else{
                    JOptionPane.showMessageDialog(this, "Pago rechazado", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //con.close();
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed

        try{
            con = conexion.getConection();
            ps = con.prepareStatement("SELECT * FROM pago WHERE codigo_cliente = ?");

            ps.setString(1, idPago.getText());

            rs = ps.executeQuery();
            if(rs.next()){
                pago.setText(rs.getString("forma_pago"));
                idTransa.setText(rs.getString("id_transaccion"));
                fecha.setText(rs.getString("fecha_pago"));
                total.setText(rs.getString("total"));             
            }else{
                JOptionPane.showMessageDialog(this, "Registro de pago no existente", "Verifique código", JOptionPane.ERROR_MESSAGE);
            }

            //con.close();
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarActionPerformed

        try{
            con = conexion.getConection();
            ps = con.prepareStatement("UPDATE pago SET forma_pago=?, id_transaccion=?, fecha_pago=?, total=? WHERE codigo_cliente=?");

            ps.setString(1, pago.getText());
            ps.setString(2, idTransa.getText());
            ps.setString(3, fecha.getText());
            ps.setString(4, total.getText());
            ps.setInt(5, Integer.parseInt(idPago.getText()));

            ps.setString(5, idPago.getText());

            int verifica = ps.executeUpdate();
            if(verifica > 0){
                JOptionPane.showMessageDialog(this, "Pago actualizado correctamente");
                limpiarCampos();
                limpiarTabla();
                cargarDatos();
            }else{
                JOptionPane.showMessageDialog(this, "Pago no actualizado", "Verifique ID", JOptionPane.ERROR_MESSAGE);
            }
            //con.close();
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_actualizarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed

        int resp = JOptionPane.showConfirmDialog(this, "¿Desea borrar a "+pago.getText()+"?", "Confimación", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(resp == 0){
            try{
                con = conexion.getConection();
                ps = con.prepareStatement("DELETE from pago WHERE codigo_cliente = ?");

                ps.setString(1, idPago.getText());

                int verifica = ps.executeUpdate();
                if(verifica > 0){
                    JOptionPane.showMessageDialog(this, "Pago borrado exitosamente");
                    limpiarCampos();
                    limpiarTabla();
                    cargarDatos();
                }else{
                    JOptionPane.showMessageDialog(this, "Pago no encontrado", "Verifique ID", JOptionPane.ERROR_MESSAGE);
                }
                //con.close();
            }catch(Exception e){
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_eliminarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void tableBDPagoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableBDPagoMouseClicked
        int fila = tableBDPago.getSelectedRow();
        String idd, nombreCli, nombreCon, apellidoCon, tel;
        if(fila == -1){
            JOptionPane.showMessageDialog(this, "Seleccione una fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }else{
            idd = (String) tableBDPago.getValueAt(fila, 0);
            nombreCli = (String) tableBDPago.getValueAt(fila, 1);
            nombreCon = (String) tableBDPago.getValueAt(fila, 2);
            apellidoCon = (String) tableBDPago.getValueAt(fila, 3);
            tel = (String) tableBDPago.getValueAt(fila, 4);            

            idPago.setText(idd);
            pago.setText(nombreCli);
            fecha.setText(apellidoCon);
            total.setText(tel);
            idTransa.setText(nombreCon);            
        }
    }//GEN-LAST:event_tableBDPagoMouseClicked

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaActionPerformed

    private void pagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pagoActionPerformed

    private void idTransaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idTransaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idTransaActionPerformed

    private void cargarDatos() {
        try{
            con = conexion.getConection();
            ps = con.prepareStatement("SELECT * FROM pago");                       
            rs = ps.executeQuery();
            Object[] cliente = new Object[5];
            model = (DefaultTableModel) tableBDPago.getModel();
            
            while(rs.next()){
                cliente[0] = rs.getString("codigo_cliente");
                cliente[1] = rs.getString("forma_pago");
                cliente[2] = rs.getString("id_transaccion");
                cliente[3] = rs.getString("fecha_pago");
                cliente[4] = rs.getString("total");
                
                model.addRow(cliente);
            }            
            tableBDPago.setModel(model);            
            //con.close();            
        }catch(Exception e){
            System.out.println(e);
        }
    }
    
    public void limpiarCampos(){        // Creamos funcion para limpriar los campos de texto
        idPago.setText("");
        pago.setText("");
        idTransa.setText("");
        fecha.setText("");
        total.setText("");        
    }
    
    public void limpiarTabla(){
        for (int i = 0; i < tableBDPago.getRowCount(); i++) {
            model.removeRow(i);
            i = i-1;
        }
    }
    
    private void ajustarAnchoColumna(JTable table) {
        //Se obtiene el modelo de la columna
        TableColumnModel columnModel = table.getColumnModel();
        //Se obtiene el total de las columnas
        for (int column = 0; column < table.getColumnCount(); column++) {
            //Establecemos un valor minimo para el ancho de la columna
            int width = 30; //Min Width
            //Obtenemos el numero de filas de la tabla
            for (int row = 0; row < table.getRowCount(); row++) {
                //Obtenemos el renderizador de la tabla
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                //Creamos un objeto para preparar el renderer
                Component comp = table.prepareRenderer(renderer, row, column);
                //Establecemos el width segun el valor maximo del ancho de la columna
                width = Math.max(comp.getPreferredSize().width + 1, width);

            }
            //Se establece una condicion para no sobrepasar el valor de 110
            //Esto es Opcional
            if (width > 110) {
                width = 110;
            }
            //Se establece el ancho de la columna
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePagos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePagos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizar;
    private javax.swing.JButton agregar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton buscar;
    private javax.swing.JComboBox<String> comboTablas;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField fecha;
    private javax.swing.JTextField idPago;
    private javax.swing.JTextField idTransa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblPago;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTransa;
    private javax.swing.JTextField pago;
    private javax.swing.JPanel paneBD;
    private javax.swing.JPanel paneDatos;
    private javax.swing.JPanel paneOperar;
    private javax.swing.JPanel panePago;
    private javax.swing.JTable tableBDPago;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
